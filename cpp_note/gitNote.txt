git 命令

git 安装

创建版本库
	创建一个新目录 通过git init 把这个目录变成git可以管理的仓库
添加文件到仓库
	git add file
提交文件到仓库
	git commit -m “add testfile” 
仓库当前状态
	git status
上次文件修改
	git diff file

修改文件后提交
	git add  git commit -m “”

修改记录
	git log  --pretty=oneline

git当前版本
	HEAR 上一个版本 HEAD^ 上上一个版本HEAD^^ 上100个版本 HEAD~100
回退
	git reset ―hard commit id/HEAD^

记录每一条命令历史
	git reflog


关于git的工作区和暂存区和分支

当我们在仓库里新建或者修改文件时候，我们其实是在工作区工作和编辑自己的文件，当使用git add时，是将工作区中的文件添加到仓库中的暂存区，git commit 实际就是把暂存区所有的内容提交到当前分支。在我们创建git版本库时候，git为我们创建了唯一一个master分支，所以commit都是从暂存区提交到这个分支上

git每次修改 必须add到暂存区，否则commit不会被提交



git撤销修改
	场景1
		工作区文件内容被修改时想撤销 git checkout ―file
	场景2
		工作区乱改了文件内容,还使用add添加到了额暂存区，想丢弃修改 
			git reset HEAD file  回到当前版本，意思就是让暂存区回到当前版本，因为没有提交到分支，当前版本就是新的。也就是说清空对暂存区的修改，回到了场景1
			git checkout ―-file 然后清空对工作区的修改，世界就清净了。
	场景3
		已经将修改的内容提交到了版本库，想撤销，，其实意思就是不想用当前版本，要回退的上一版本。注意，场景2是回退的当前版本，因为他在暂存区还没有提交。所以如果提交了再撤销修改，需要回退到上一个版本
		git reset HEAD^/commit id
	场景4   推送到了远程库。完蛋。。。。。

git删除
	直接删除后 要删除版本库
		git rm filename
		git commit -m ‘’;
	如果是删错了
		git checkout filename 用版本库的内容替换工作区的内容   必须加上文件名才能还原回来



gitHub 
	这个网站是提供git仓库托管服务的，只要注册一个GitHub账号，就可以免费获得Git远程仓库
	


创建SSH key
	ssh-keygen -t rsa -C "youremail@example.com"  一路回车
	里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。



gitHub 仓库地址
	https://github.com/xiaodulala/DuyongCode.git

	将本地仓库与gitHub远程仓库关联 远程库的名字叫origin_dy
	git remote add origin_dy git@github.com:xiaodulala/DuyongCode.git
	关联后 使用命令 git push -u origin_dy master  实际上是把当前分支master推送到远程仓库

	此后，每次提交以后，需要将本地分支推送到远程仓库  git push 远程仓库名称(origin_dy) master
  



从远程库克隆代码到本地
	git clone git@github.com:xiaodulala/code.git
	git clone git@github.com:hub用户名/项目名.git


创建和合并分支
	查看分支   git branch
	创建分支   git branch name
	切换分支	  git checkout name
	创建加切换分支   git checkout -b name
	合并某分支到当前分支  git merge name
	删除分支    git branch -d name
	
	原理  分支是一条时间线，目前为止，我们只有一条时间线，就是主分支master。git用master指向最新的提交，再用HEAD指向master。就能确定当前分支和当前分支的提交点。每次提交，master分支都会向前移动一步，随着你的不段提交，master分支也会越来越长。
	创建新的分支，git新建了一个指针叫dev 指向master相同的提交 再把HEAD指向dev 就表示当前分支在dev上，从现在开始，对工作区的修改提交就是针对dev分支，提交一次dev分支向前移动一步，而master分支指针位置不变。
	加入在dev上完成了工作，可以把dev合并到master上。可以直接把master分支指向dev的当前提交，也就是让master指针指到dev处
	

解决中途
	两个分支同时对一个文件进行了修改，合并时会出现冲突。  需要手动解决冲突
	git log ―graph 可以看到合并图


分支管理策略
	Fast forward 合并模式，删除分支后会丢掉分支信息
	―-no-ff 
	合并和会创建一个新的commit 所以要加-m参数

	分支策略：
		master分支是非常稳定的
		创建新的dev分支 不稳定
		干活都在dev的分支上干活，合并到dev上，然后合并到mster上 从本地主分支推送到远程库主分支


bug分支
	应用场景
		当我们换在dev分支上开发东西的时候，写到一半，出现bug。这时候还不能提交，我们需要先保存工作区的东西到一个地方 命令 git stash 
		然后去master分支或者其他分支上 新开一个bug分支 解决bug后，和master合并然后删除
		
		回到dev开发分支，查看工作现场列表 git stash list
		回复工作现场
			git stash apply 回复后stash内容不删除 删除需要使用 git stash drop
			git stash pop 回复的同时把stash也删除了
			可以多次使用 stash 恢复的时候使用git stash list 查看
			然后指定回复 git stash apply stash@{0}

丢弃一个没有合并过的分支
	git branch -D name


git多人协作
	查看远程库信息
		git remote
		git remote -v
	推送分支
		git push 远程库名称 推送的分支
		git push origin_dy master
		git push origin_dy dev
	抓取分支
		git clone git@github.com:xiaodulala/DuyongCode.git
		别人抓取到的只有master分支
		如果别人也要在dev分支上开发，就必须创建远程库下面的dev分支到本地
		git fetch 
		git checkout -b dev origin_dy/dev
		现在他就可以在dev上继续修改，并可以将dev分支直接推送到远程库的dev分支
	获取远程仓库最新提交	
		git pull
		pull失败是因为本地dev分支与远程dev分支没有链接
		git branch ―-set-upstream dev origin_dy/dev
	如果你提交时候有冲突，先git pull得到最新提交，解决冲突后再进行push



标签管理
	在最新的commit提交点上打上标签，不可移动。
	创建标签
		git tag <name>
		git tag v1.0
	给历史提交点打标签
		git log  找到commit id
		git tag <name>  commit id

	查看标签
		git tag
	

		

	



