/*
 * 函数和指针的区别 前两点必须知道 注意：此文件不可编译 只是例子
 * 1. 引用的本质是指针
 * 2. 指针不必初始化 定义后可以更改指向的目标数据。 引用必须初始化 定义后不可以更改引用目标
 * 3. 指针可以定义指针的指针也就是二级指针 但是不能定义引用的引用。
 * 4. 可以定义指针的引用也就是给指针变量起个别名 但是不能定义引用的指针
 * 5. 关于数组 可以定义指针数组  但不是能定义引用数组
 * 6. 可以定于数组的引用 给数组起别名
 * 7. 可以定义函数指针，也可以定义函数引用
 *
 *
 * */
#include <iostream>


int main ()
{
	/*
	 * 1. 从c语言的角度看引用的本质就是指针 可以认为引用是通过指针实现的
	 *
	 * 以下例子  ra等价*p
	 * */
	int a = 10;
	int* const p_a = &p;//不许更换指针指向的地址  const在前表示不许更换指针指向的地址数据
	int &r_a = a; 
	
	/*
	 *2.指针定义时可以不做初始化  指向的目标也可以修改(指针常量除外) 而引用定义的时候必须初始化 而且一旦初始化其引用的目标不能再改变
	 * 
	 * */
	
	int a=100,b=200;
	int *p;//ok  
	p = &a;
	int &r;//error 
	r=a;
	
	/*
	 * 3.可以定义指针的指针(二级指针) 但是不能定义引用的指针
	 *
	 * */
	int a=100;
	int *p=&a;
	int *pp=&p;//这是一个二级指针

	int &r=a;
	int& *pr=&r;//这是引用的指针 error
	int *pr = &r; //这是一个普通的指针 不能叫引用的指针

	/*
	 * 4.可以定义指针的引用 不能定义引用的引用
	 * 
	 */	
	
	int a = 100;
	int *p = &a;
	int *&rp = p;//指针的引用

	int &r=a;
	int &&r=r;//应用的引用 error
	int r2=r;//不能叫引用的引用 只是个给起了另外一个别名


	/*
	 * 5.可以定义指针数组  但是不能定义引用数组
	 * */
	
	int a,b,c;
	int *arr[3]={&a,&b,&c};//OK 指针数组
	int &arr[3]={a,b,c};

	/*
	 * 6.可以使用数组引用 给数组起别名
	 * */


	int arr[4]={0};
	int (&r_arr)[4]=arr;//类型是int[4] 和上面数组类型一样

	/*
	 * 7.函数指针类型 也可以定义函数引用
	 * */
	void func(int a,int b){};

	void (*p_func)(int,int)=func;//函数指针 ok 
	
	void (&r_func)(int,int)=func;//函数的引用 函数的别名 ok 

	








	return 0;
}
