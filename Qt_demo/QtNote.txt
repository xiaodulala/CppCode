2.1 可视化UI的设计
	使用设计师设计页面，字体的格式和颜色的控制
2.2 混合方式UI设计
	创建一个MainWindow窗口 有主菜单 工具栏和状态栏 使用UI设计完成
	在工具栏上增加字体选择SpinBox组件，在状态栏添加Label和ProcessBar组件 无法使用UI设计完成，使用代码手动编写
	资源的使用和Actions的使用。

3.1.1 Qt的核心特点
	Qt本身不是一种编程语言，实质上是一个跨平台的c++开发类库。使用标准c++编写的类库
	Qt对标准c++做了扩展 引入了一些新的概念，比如信号和槽 对象属性等。
	Qt的元对象编译器Meta-Object Compiler MOC是一个预处理器。在源程序被编译前，先将这些Qt特性的程序转化为标准c++兼容形式。然后再由c++编译器进行编译。
	这就是为什么在使用信号和槽的类里，需要添加一个Q_OBJECT宏的原因。只有添加了这个宏，moc预处理器才能对信号和槽的代码进行处理
3.1.2 元对象系统
	Qt的元对象系统提供了对象之间通信的信号和槽机制，运行时类信息和动态属性系统。
	元对象系统由以下三个基础组成
	QObject 类是所有使用元对象系统类的基类
	在一个类的private部分 声明QObject宏 使得类可以使用元对象的特性 如动态属性 信号和槽
	MOC元对象编译器
	除了信号和槽以外，元对象还提供以下功能
	QObject::metaObject()函数返回类关联的元对象 元对象类 QMetaObject包含了访问元对象的一些接口函数 如QMetaObject::className()函数可在运行时返回类的名称字符串
	QObject *obj = new PushButton;
	obj->metaObject()->classname() //返回QPushButton
	
	QMetaObject::newInstance() 函数创建一个类的新的实例
	
	QObject::inherits(const char* className)函数判断一个对象实例是不是名称为classname的类或QObjectde的子类的实例
	QTimer *timer = new QTimer;
	time->inherits("QTimer") //true
	time->inherits("QObject") //true
	time->inherits("QPushbuton") //false  不是QPushButton的子类
	
	QObject::tr()  QObject::trUtf8()函数可以翻译字符串
	QOBject::setProperty() QObject::property() 函数用于通过属性名称动态设置和获取属性值
	
	对象的投射 Qobject_cast() 
3.1.3 属性系统
	Qt提供了一个QPROPERTY()宏可以定义属性，也是基于元对象系统实现的 在QOBject子类中 可以如下定义
	Q_PROPERTY(
		type name (READ getFunction[WRITE setFunction]|MEMBER memberName[(READ getFunction|WRITE setFunction)])
		[RESET resetFunction]
		[NOTIFY notifuSignal]
		[REVISION int]
		[DESIGNABLE bool]  
		[SCRIPTABLE bool]
		[STORED bool]
		[USER bool]
		[CONSTANT]
		[FINAL]
	)
	read 指定一个读取属性值的函数
	write 指定一个设置属性值的函数
	member 指定一个成员变量和属性关联
	reset 指定一个设置属性缺省值的函数
	notify 用于设置一个信号 当属性值发生变化的时候发射此信号
	
	属性的使用
		不管是否用read和write定义了接口函数，只要知道属性的名称，就可以通过QObject::property 读取属性值 通过QObject::setProperty 设置属性值
	
	动态属性
		QObject::setProperty函数可以在运行为类定义新的属性，叫做动态属性，动态属性是针对类的实例定义的。也就是对象定义的，和类无关。
	类的附加信息
		Q_CLASSINFO 可以为类的元对象定义名称-值信息
		class QMclass :public QOBject{
			Q_OBJECT
			Q_CLASSINFO("author","wanng")
			Q_CLASSINFO("company","UPC")
		}
		可以通过元对象的函数来获取类的附加信息 classInfo(int) 获取某个附加信息
		QMetaClassInfo QMetaObject::classInfo(int index)const
		返回值 QMetaClassInfo 有name() 和value() 两个函数 可获得类附件信息的名称和值

3.1.4 信号和槽
	代码中体现

3.1.5 元对象测试实例	
	

4.常用的界面组件

4.1字符串输入和输出

4.1.1 字符串与数值之间的转换
	转换成整数
	QString.toInt(bool* ok=Q_NULLPTR,int base=10)const
			toLong
			toShort
			toUint
			toULong
	转换成浮点数
		    toDouble
			toFloat
	数字转换成格式字符串
		QString::number(total,'f',2)
		QString::asprintf("%.2f",total)
		QString str.setNUM()
		QString str.sprintf()
	
	进制字符串转换
	str = QString::number(val,16)
	str = setNum(val,2)
4.1.2 QString常用功能
	字符串前面添加字符串 prepend()  str1.prepend(str2)
	字符串后面添加字符串 append()   str1.append(str2)
	大小写转换 str.toUpper()  str.toLower()
	字符个数  count() size() length()  中文算一个字符
	去掉首尾空格 trimmed() 
	去掉首尾空格，中间的连续空格用一个空格替换 simplified()
	在自身字符串中查找参数字符串出现的位置  str.indexOf("du")
	判断字符是否为空 isNull isEmpty    未赋值的字符串 isNull是true  含有\0的空字符串 isNULL返回false isEmpty返回true
	是否包含某个字符串 str.contains()
	是否已某个字符串开头或者结尾  str.startWith("du")  str.endWith()
	从字符串中取左边多少个字符 str.left(20)  str.right(20)
	以某个分隔符分割字符串后取字符串的值  str.section(",",0,4)
4.2 QSpintBox QDoubleSpinBox
4.3 其他数值输入和显示组件
	QSlider 滑动条
	QScrollBar 卷滚条
	QProgressBar 进度条
	QDial 表盘式数值输入
	QLCDNumber LCD数字显示
	实例演示 4.3.1
4.4 时间日期和定时器
4.4.1 数据类型
	QTime 时间数据类型 仅表示时间
	QDate 日期数据类型 仅表示日期
	QDateTime 日期时间数据类型 表示日期和时间
4.4.2 界面组件
	QTimeEdit 编辑和显示时间的组件
	QDateEdit 编辑和显示提起的组件
	QDateTimeEdit 编辑和显示日期时间的组件
	QCalendarWidget 一个用日历形式选择日期的组件
4.4.3 QTimer 定时器
	实例演示 4.4	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	